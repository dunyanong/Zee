Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var glamor = require('glamor');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var styles = {
    progressContainer: function (round, height, border) {
        var convertedHeight = typeof height === "string" ? height : height + "px";
        return glamor.css({
            width: "100%",
            height: convertedHeight,
            position: "relative",
            border: border,
            borderRadius: round ? "400px" : "0",
            overflow: "hidden",
        });
    },
    progressBackground: function (backgroundColor) {
        return glamor.css({
            backgroundColor: backgroundColor,
            width: "100%",
            height: "100%",
            position: "absolute",
            top: 0,
            left: 0,
        });
    },
    progressElement: function (backgroundColor, offset, value, transitionTime, roundRight, textColor, fontSize) {
        var roundRightString = roundRight ? "40px 40px" : "0 0";
        return glamor.css({
            backgroundColor: backgroundColor,
            width: value + "%",
            zIndex: 8,
            height: "100%",
            top: 0,
            left: offset + "%",
            position: "absolute",
            transition: "width " +
                transitionTime +
                "s ease-in-out, left " +
                transitionTime +
                "s ease-in-out",
            borderRadius: "0 " + roundRightString + " 0",
            color: textColor,
            textAlign: "center",
            fontSize: fontSize ? fontSize : 8,
        });
    },
};
function createElementArray(elements, transitionTime, roundLastElement, component) {
    var currentOffset = 0;
    var newElements = [];
    var Element = component !== null && component !== void 0 ? component : "div";
    elements.forEach(function (element, i) {
        newElements.push(React.createElement(Element, __assign({}, styles.progressElement(element.color, currentOffset, element.value, transitionTime, i === elements.length - 1 && roundLastElement, element.textColor, element.fontSize), { key: i, className: element.className, element: element }), element.showPercentage && element.value + "%"));
        currentOffset += element.value;
    });
    return newElements;
}
function MultiProgress(_a) {
    var _b = _a.backgroundColor, backgroundColor = _b === void 0 ? "#ffffff" : _b, _c = _a.border, border = _c === void 0 ? "" : _c, elements = _a.elements, _d = _a.height, height = _d === void 0 ? 10 : _d, _e = _a.round, round = _e === void 0 ? true : _e, _f = _a.roundLastElement, roundLastElement = _f === void 0 ? true : _f, _g = _a.transitionTime, transitionTime = _g === void 0 ? 0.6 : _g, className = _a.className, component = _a.component;
    return (React.createElement("div", __assign({}, styles.progressContainer(round, height, border), { className: className }),
        React.createElement("div", __assign({}, styles.progressBackground(backgroundColor))),
        createElementArray(elements, transitionTime, roundLastElement, component).map(function (element, i) { return (React.createElement("div", { key: i }, element)); })));
}

exports.default = MultiProgress;
//# sourceMappingURL=index.js.map
