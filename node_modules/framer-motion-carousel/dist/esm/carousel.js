import * as React from "react";
import { animate, useMotionValue } from "framer-motion";
import Arrow from "./arrow";
import Slider from "./slider";
import Dots from "./dots";
var containerStyle = {
  position: "relative",
  width: "100%",
  height: "100%",
  overflowX: "hidden",
  display: "flex"
};
var transition = {
  type: "spring",
  bounce: 0
};
var Contaier = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement("div", {
  ref: ref,
  style: containerStyle
}, props.children));
export var Carousel = _ref => {
  var {
    children,
    renderArrowLeft,
    renderArrowRight,
    renderDots,
    autoPlay = true,
    interval = 2000,
    loop = true
  } = _ref;
  var x = useMotionValue(0);
  var containerRef = React.useRef(null);
  var [index, setIndex] = React.useState(0);

  var calculateNewX = () => {
    var _containerRef$current;

    return -index * (((_containerRef$current = containerRef.current) == null ? void 0 : _containerRef$current.clientWidth) || 0);
  };

  var handleEndDrag = (e, dragProps) => {
    var _containerRef$current2;

    var clientWidth = ((_containerRef$current2 = containerRef.current) == null ? void 0 : _containerRef$current2.clientWidth) || 0;
    var {
      offset
    } = dragProps;

    if (offset.x > clientWidth / 4) {
      handlePrev();
    } else if (offset.x < -clientWidth / 4) {
      handleNext();
    } else {
      animate(x, calculateNewX(), transition);
    }
  };

  var childrens = React.Children.toArray(children);

  var handleNext = () => {
    var idx = loop ? 0 : index;
    setIndex(index + 1 === childrens.length ? idx : index + 1);
  };

  var handlePrev = () => {
    var idx = loop ? childrens.length - 1 : 0;
    setIndex(index - 1 < 0 ? idx : index - 1);
  };

  React.useEffect(() => {
    var controls = animate(x, calculateNewX(), transition);
    return controls.stop;
  }, [index]);
  React.useEffect(() => {
    if (!autoPlay) {
      return;
    }

    var timer = setInterval(() => handleNext(), interval);
    return () => clearInterval(timer);
  }, [handleNext, interval]);
  return /*#__PURE__*/React.createElement(Contaier, {
    ref: containerRef
  }, childrens.map((child, i) => /*#__PURE__*/React.createElement(Slider, {
    onDragEnd: handleEndDrag,
    x: x,
    i: i,
    key: i
  }, child)), renderArrowLeft ? renderArrowLeft({
    handlePrev,
    activeIndex: index
  }) : /*#__PURE__*/React.createElement(Arrow, {
    left: true,
    onClick: handlePrev
  }, "\u2190"), renderArrowRight ? renderArrowRight({
    handleNext,
    activeIndex: index
  }) : /*#__PURE__*/React.createElement(Arrow, {
    onClick: handleNext
  }, "\u2192"), renderDots ? renderDots({
    setActiveIndex: setIndex,
    activeIndex: index
  }) : /*#__PURE__*/React.createElement(Dots, {
    length: childrens.length,
    setActiveIndex: setIndex,
    activeIndex: index
  }));
};